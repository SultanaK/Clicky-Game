{"version":3,"sources":["components/Navbar/Navbar.js","components/Modal/Modal.js","components/ClickCard/ClickCard.js","components/Footer/Footer.js","App.js","registerServiceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","style","cursor","onClick","document","getElementsByClassName","classList","remove","href","paddingRight","score","paddingLeft","topScore","Modal","add","ClickCard","reArrangeCards","clickedCharacter","id","handleClick","alt","name","src","image","Footer","text","App","state","cards","clickedCards","footerText","_document$getElements","getElementsByTagName","pageBody","Object","slicedToArray","_this","includes","setState","setTimeout","concat","toConsumableArray","array","currentIndex","length","randomIndex","Math","floor","random","temporaryValue","renderCards","map","card","key","components_ClickCard_ClickCard","Navbar_Navbar","this","components_Modal_Modal","Footer_Footer","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","HashRouter","src_App","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"yQAuBeA,MArBf,SAAgBC,GACf,OACAC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACdH,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACdH,EAAAC,EAAAC,cAAA,KAAGE,MAAO,CAACC,OAAQ,WAAWF,UAAU,OAAOG,QAAS,WACtDC,SAASC,uBAAuB,qBAAqB,GAAGC,UAAUC,OAAO,UAD3E,gBAGAV,EAAAC,EAAAC,cAAA,KAAGS,KAAK,IAAIR,UAAU,qBAAtB,eACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SACbH,EAAAC,EAAAC,cAAA,MAAIE,MAAO,CAACQ,aAAc,SAA1B,UAA2Cb,EAAMc,OACjDb,EAAAC,EAAAC,cAAA,MAAIE,MAAO,CAACU,YAAa,SAAzB,cAA8Cf,EAAMgB,qBCkB1CC,MA1Bf,WACC,OACChB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAd,qBACAH,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAAA,kDACAF,EAAAC,EAAAC,cAAA,uEACAF,EAAAC,EAAAC,cAAA,0DACAF,EAAAC,EAAAC,cAAA,gEAGFF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kCACdH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,+BAA+BG,QAAS,WACpDC,SAASC,uBAAuB,qBAAqB,GAAGC,UAAUQ,IAAI,UADvE,kCCAWC,MAXf,SAAmBnB,GAClB,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBAAqBG,QAAS,kBAP/C,SAAqBP,GACpBA,EAAMoB,iBACNpB,EAAMqB,iBAAiBrB,EAAMsB,IAKuBC,CAAYvB,KAC9DC,EAAAC,EAAAC,cAAA,OAAKqB,IAAKxB,EAAMyB,KAAMC,IAAK1B,EAAM2B,UCYrBC,MAnBf,SAAgB5B,GACd,OACEC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mCAAmCJ,EAAM6B,QAG3D5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BCwFR0B,mNA1FbC,MAAQ,CACJC,MAAOA,EACPlB,MAAO,EACPE,SAAU,EACViB,aAAc,GACdC,WAAY,MAGhBb,iBAAmB,SAACC,GAAO,IAAAa,EACN3B,SAAS4B,qBAAqB,QAA1CC,EADkBC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,MAGrBK,EAAKT,MAAME,aAAaQ,SAASnB,IACnCkB,EAAKE,SAAS,CAAC5B,MAAO,EAAGmB,aAAc,KAEvCI,EAAS3B,UAAUQ,IAAI,gBACvBsB,EAAKE,SAAS,CAACR,WAAY,mDAC3BS,WAAW,WACTN,EAAS3B,UAAUC,OAAO,iBACzB,KACHgC,WAAW,WACTH,EAAKE,SAAS,CAACR,WAAY,MAC1B,QAGHM,EAAKE,SAAS,CAACT,aAAY,GAAAW,OAAAN,OAAAO,EAAA,EAAAP,CAAME,EAAKT,MAAME,cAAjB,CAA+BX,MAC1DkB,EAAKE,SAAS,CAAC5B,MAAO0B,EAAKT,MAAMjB,MAAQ,IACrC0B,EAAKT,MAAMjB,OAAS0B,EAAKT,MAAMf,UACjCwB,EAAKE,SAAS,CAAC1B,SAAUwB,EAAKT,MAAMjB,MAAQ,IAGrB,KAArB0B,EAAKT,MAAMjB,QACb0B,EAAKE,SAAS,CAACR,WAAY,wCAC3BM,EAAKE,SAAS,CAAC5B,MAAO,EAAGmB,aAAc,GAAID,MAAOA,IAClDW,WAAW,WACTH,EAAKE,SAAS,CAACR,WAAY,MAC1B,WAMTd,eAAiB,SAAC0B,GAGhB,IAFA,IAAIC,EAAeD,EAAME,OAElB,IAAMD,GAAc,CAEzB,IAAIE,EAAcC,KAAKC,MAAMD,KAAKE,SAAWL,GAGzCM,EAAiBP,EAFrBC,GAAgB,GAGhBD,EAAMC,GAAgBD,EAAMG,GAC5BH,EAAMG,GAAeI,EAGvBb,EAAKE,SAAS,CAACV,MAAMA,OAGvBsB,YAAc,SAACR,GACb,OAAON,EAAKT,MAAMC,MAAMuB,IAAI,SAAAC,GAAI,OAC9BvD,EAAAC,EAAAC,cAAA,WAASC,UAAU,eAAeqD,IAAKD,EAAKlC,GAAIA,GAAIkC,EAAKlC,IACvDrB,EAAAC,EAAAC,cAACuD,EAAD,CACEjC,KAAM+B,EAAK/B,KACXE,MAAO6B,EAAK7B,MACZP,eAAgB,WAAOoB,EAAKpB,eAAeoB,EAAKT,MAAMC,QACtDX,iBAAkB,WAAOmB,EAAKnB,iBAAiBmC,EAAKlC,mFAQ1D,OACErB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAACwD,EAAD,CAAQ7C,MAAO8C,KAAK7B,MAAMjB,MAAOE,SAAU4C,KAAK7B,MAAMf,WACtDf,EAAAC,EAAAC,cAAC0D,EAAD,MACA5D,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACZwD,KAAKN,YAAYM,KAAK7B,MAAMC,QAE/B/B,EAAAC,EAAAC,cAAC2D,EAAD,CAAQjC,KAAM+B,KAAK7B,MAAMG,qBAjFf6B,cCAZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB/C,QACfyC,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,iBC/DjEC,IAASC,OAAOtF,EAAAC,EAAAC,cAACqF,EAAA,EAAD,KAAQvF,EAAAC,EAAAC,cAACsF,EAAD,OAAkBjF,SAASkF,eAAe,SDanD,WACb,GAA6C,kBAAmBlB,UAAW,CAGzE,GADkB,IAAImB,IAAIC,eAAwB1B,OAAOC,UAC3C0B,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,OAAQ,WAC9B,IAAMvB,EAAK,GAAA3B,OAAMgD,eAAN,sBAEP5B,EAwCV,SAAiCO,GAE/BwB,MAAMxB,GACHI,KAAK,SAAAqB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C5B,UAAUC,cAAc4B,MAAM1B,KAAK,SAAAC,GACjCA,EAAa0B,aAAa3B,KAAK,WAC7BT,OAAOC,SAASoC,aAKpBjC,EAAgBC,KAGnBa,MAAM,WACLF,QAAQC,IACN,mEA5DAqB,CAAwBjC,GAGxBD,EAAgBC,MC/BxBkC","file":"static/js/main.9035aa2d.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Navbar(props) {\n\treturn(\n\t<div className=\"navbar-fixed\">\n\t\t<nav>\n\t\t\t<div className=\"nav-wrapper container\">\n\t\t\t\t<a style={{cursor: 'pointer'}}className='left' onClick={() => \n\t\t\t\t\t{document.getElementsByClassName('instructionsModal')[0].classList.remove('hide');\n\t\t\t\t}}>Instructions</a>\n\t\t\t\t<a href=\"/\" className='brand-logo center'>Memory Game</a>\n\t\t\t\t<ul className='right'>\n\t\t\t\t\t<li style={{paddingRight: \"20px\"}}>Score: {props.score}</li>\n\t\t\t\t\t<li style={{paddingLeft: \"20px\"}}>Top Score: {props.topScore}</li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t</nav>\n\t</div>\n\t)\n}\n\n\n\nexport default Navbar;\n\n\n\n\n\n\n\n\n","import React from 'react';\nimport './Modal.css';\n\n\n\nfunction Modal() {\n\treturn (\n\t\t<div className=\"instructionsModal\">\n\t\t\t<div className=\"modal-content\">\n\t\t\t\t<h4 className=\"center\">Game Instructions</h4>\n\t\t\t\t<ol>\n\t\t\t\t\t<li>Click on an Image to start the game.</li>\n\t\t\t\t\t<li>Every time you click an image, the images get rearranged.</li>\n\t\t\t\t\t<li>If you pick the same image twice...You Lose!</li>\n\t\t\t\t\t<li>Click all 12 images without repeating...You Win!</li>\n\t\t\t\t</ol>\n\t\t\t</div>\n\t\t\t<br />\n\t\t\t<div className=\"modal-footer white-text center\">\n\t\t\t\t<a className=\"waves-effect waves-light btn\" onClick={() => {\n\t\t\t\t\tdocument.getElementsByClassName('instructionsModal')[0].classList.add('hide');\n\t\t\t\t}}>Let's Play Already...</a>\n\t\t\t</div>\t\n\t\t</div>\n\t)\n}\n\n\n\n\n\nexport default Modal;","import React from 'react';\nimport './ClickCard.css';\n\nfunction handleClick(props) {\n\tprops.reArrangeCards();\n\tprops.clickedCharacter(props.id);\n}\n\nfunction ClickCard(props) {\n\treturn (\n\t\t<div className=\"card img-container\" onClick={() => handleClick(props)}>\n\t\t\t<img alt={props.name} src={props.image} />\n\t\t</div>\n\t)\n}\n\n\n\n\nexport default ClickCard","import React from 'react';\n\n\n\nfunction Footer(props) {\n  return (\n    <footer className=\"page-footer\">\n      <div className=\"container\">\n        <div className=\"row\">\n          <h5 className=\"center white-text footer-update\">{props.text}</h5>\n        </div>\n      </div>\n      <div className=\"footer-copyright\">\n        <div className=\"container center\">\n        </div>\n      </div>\n    </footer>\n  )\n}\n\n\n\n\nexport default Footer;","import React, { Component } from 'react';\nimport Navbar from './components/Navbar/Navbar.js';\nimport Modal from './components/Modal/Modal.js';\nimport ClickCard from './components/ClickCard/ClickCard.js';\nimport Footer from './components/Footer/Footer.js';\nimport cards from './cards.json';\n\nimport './index.css';\n\n\nclass App extends Component {\n  state = {\n      cards: cards,\n      score: 0,\n      topScore: 0,\n      clickedCards: [],\n      footerText: \"\"\n    }\n\n  clickedCharacter = (id) => {\n    const [pageBody] = document.getElementsByTagName('body');\n\n    if (this.state.clickedCards.includes(id)) {\n      this.setState({score: 0, clickedCards: []})\n\n      pageBody.classList.add('shakeWrapper')\n      this.setState({footerText: 'You already picked that character! Start Over.'})\n      setTimeout(() => {\n        pageBody.classList.remove('shakeWrapper');\n      }, 500);\n      setTimeout(() => {\n        this.setState({footerText: \"\"})\n      }, 1800)\n\n    } else {\n      this.setState({clickedCards: [...this.state.clickedCards, id]})\n      this.setState({score: this.state.score + 1})\n      if (this.state.score >= this.state.topScore) {\n        this.setState({topScore: this.state.score + 1})\n\n      } \n      if (this.state.score === 11) {\n        this.setState({footerText: 'You Won! Do you want to play again?'})\n        this.setState({score: 0, clickedCards: [], cards: cards})\n        setTimeout(() => {\n          this.setState({footerText: ''})\n        }, 1800)\n      } \n    }\n  }\n\n  // I copy and pasted this randomize array function from 'Fisher-Yates Shuffle'\n  reArrangeCards = (array) => {\n    let currentIndex = array.length;\n\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      let randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      // And swap it with the current element.\n      let temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    this.setState({cards:cards});\n  }\n\n  renderCards = (array) => {\n    return this.state.cards.map(card => (\n      <section className='col s4 m3 l3' key={card.id} id={card.id}>\n        <ClickCard\n          name={card.name} \n          image={card.image} \n          reArrangeCards={() => {this.reArrangeCards(this.state.cards)}}\n          clickedCharacter={() => {this.clickedCharacter(card.id)}}/>\n      </section>\n      )\n    )\n  }\n\n\n  render() {\n    return (\n      <div className=\"container-fluid\">\n        <Navbar score={this.state.score} topScore={this.state.topScore}/>\n        <Modal />\n        <br />\n        <div className=\"container row cardWrapper\">\n          {this.renderCards(this.state.cards)}\n        </div>\n        <Footer text={this.state.footerText}/>\n      </div>\n    );\n  }\n}\n\n\n\n\n\nexport default App;\n\n\n\n\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport './index.css';\nimport { HashRouter as Router } from 'react-router-dom';\n\nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}